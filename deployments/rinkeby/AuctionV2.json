{
  "address": "0x5Ad7106acDe1078185BaA5c38d2218656B6dc3BA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "_price",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minIncrement",
          "type": "uint256"
        }
      ],
      "name": "createTokenAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "executeSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenAuctionDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "price",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxBid",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "maxBidUser",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256[]",
              "name": "bidAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "users",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "minIncrement",
              "type": "uint256"
            }
          ],
          "internalType": "struct AuctionV2.tokenDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenToAuction",
      "outputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "price",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxBid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "maxBidUser",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "minIncrement",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x01431d8c65b1e23ac7a644372b9fa413bb0716f4358026fc4a4ebd46011a6d93",
  "receipt": {
    "to": null,
    "from": "0x2B65cd345Ad3bf6dA7b497d67b3a8cFE7b9a3500",
    "contractAddress": "0x5Ad7106acDe1078185BaA5c38d2218656B6dc3BA",
    "transactionIndex": 22,
    "gasUsed": "2288794",
    "logsBloom": "0x
    "blockHash": "0x92e7194badb2a3ec83cada02edb179dfa8d721150c21e92657f865e677ce8c1d",
    "transactionHash": "0x01431d8c65b1e23ac7a644372b9fa413bb0716f4358026fc4a4ebd46011a6d93",
    "logs": [],
    "blockNumber": 9516928,
    "cumulativeGasUsed": "7247053",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9cbd830a088c5083b9245c08c37d2c0c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_price\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minIncrement\",\"type\":\"uint256\"}],\"name\":\"createTokenAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"executeSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenAuctionDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maxBidUser\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"bidAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minIncrement\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionV2.tokenDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToAuction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maxBidUser\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minIncrement\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bid(address,uint256)\":{\"notice\":\"Users bid for a particular nft, the max bid is compared and set if the current bid id highest\"},\"cancelAuction(address,uint256)\":{\"notice\":\"Called by the seller if they want to cancel the auction for their nft so the bidders get back the locked eeth and the seller get's back the nft\"},\"createTokenAuction(address,uint256,uint128,uint256,uint256)\":{\"notice\":\"Seller puts the item on auction\"},\"executeSale(address,uint256)\":{\"notice\":\"Called by the seller when the auction duration is over the hightest bid user get's the nft and other bidders get eth back\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AuctionV2.sol\":\"AuctionV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/AuctionV2.sol\":{\"content\":\"pragma solidity 0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\n\\r\\n\\r\\ncontract AuctionV2 is IERC721Receiver {\\r\\n\\r\\n    // Data structure that stores details of the NFT in auction\\r\\n    struct tokenDetails {\\r\\n        address seller;\\r\\n        uint128 price;\\r\\n        uint256 duration;\\r\\n        uint256 maxBid;\\r\\n        address maxBidUser;\\r\\n        bool isActive;\\r\\n        uint256[] bidAmounts;\\r\\n        address[] users;\\r\\n        uint256 minIncrement;\\r\\n    }\\r\\n\\r\\n    // Mapping of NFT token contract <> Token ID <> details of the auction \\r\\n    mapping(address => mapping(uint256 => tokenDetails)) public tokenToAuction;\\r\\n\\r\\n    // Mapping of NFT token contract <> Token ID  <> EOA bidding address <> price/bid\\r\\n    mapping(address => mapping(uint256 => mapping(address => uint256))) public bids;\\r\\n    \\r\\n    /**\\r\\n       Seller puts the item on auction\\r\\n    */\\r\\n    function createTokenAuction(\\r\\n        address _nft,\\r\\n        uint256 _tokenId,\\r\\n        uint128 _price,\\r\\n        uint256 _duration,\\r\\n        uint256 _minIncrement\\r\\n    ) external {\\r\\n        require(msg.sender != address(0), \\\"Invalid Address 0x0\\\");\\r\\n        require(_nft != address(0), \\\"Invalid NFT address 0x0\\\");\\r\\n        require(_price > 0, \\\"Price should be more than 0\\\");\\r\\n        require(_duration > 0, \\\"Invalid duration value\\\");\\r\\n        require(_minIncrement > 0, \\\"Price increment must be greater 0\\\");\\r\\n        tokenDetails memory _auction = tokenDetails({\\r\\n            seller: msg.sender,\\r\\n            price: uint128(_price),\\r\\n            duration: _duration,\\r\\n            maxBid: 0,\\r\\n            maxBidUser: address(0),\\r\\n            isActive: true,\\r\\n            bidAmounts: new uint256[](0),\\r\\n            users: new address[](0),\\r\\n            minIncrement: 0\\r\\n        });\\r\\n        address owner = msg.sender;\\r\\n        ERC721(_nft).safeTransferFrom(owner, address(this), _tokenId);\\r\\n        tokenToAuction[_nft][_tokenId] = _auction;\\r\\n    }\\r\\n    /**\\r\\n       Users bid for a particular nft, the max bid is compared and set if the current bid id highest\\r\\n    */\\r\\n\\r\\n    // CONTINUE UPDATING THIS PART OF THE SCRIPT\\r\\n    // CONTINUE HERE...\\r\\n    function bid(address _nft, uint256 _tokenId) external payable {\\r\\n        tokenDetails storage auction = tokenToAuction[_nft][_tokenId];\\r\\n        // require(msg.value >= auction.price, \\\"bid price is less than current price\\\");\\r\\n        require(msg.value >= auction.price + auction.minIncrement, \\\"Your bid does not meet the minimum price increment\\\" );\\r\\n        require(auction.isActive, \\\"auction not active\\\");\\r\\n        require(auction.duration > block.timestamp, \\\"Deadline already passed\\\");\\r\\n        if (bids[_nft][_tokenId][msg.sender] > 0) {\\r\\n            (bool success, ) = msg.sender.call{value: bids[_nft][_tokenId][msg.sender]}(\\\"\\\");\\r\\n            require(success);\\r\\n        }\\r\\n        bids[_nft][_tokenId][msg.sender] = msg.value;\\r\\n        if (auction.bidAmounts.length == 0) {\\r\\n            auction.maxBid = msg.value;\\r\\n            auction.maxBidUser = msg.sender;\\r\\n        } else {\\r\\n            uint256 lastIndex = auction.bidAmounts.length - 1;\\r\\n            require(auction.bidAmounts[lastIndex] < msg.value, \\\"Current max bid is higher than your bid\\\");\\r\\n            auction.maxBid = msg.value;\\r\\n            auction.maxBidUser = msg.sender;\\r\\n        }\\r\\n        auction.users.push(msg.sender);\\r\\n        auction.bidAmounts.push(msg.value);\\r\\n    }\\r\\n    /**\\r\\n       Called by the seller when the auction duration is over the hightest bid user get's the nft and other bidders get eth back\\r\\n    */\\r\\n    function executeSale(address _nft, uint256 _tokenId) external {\\r\\n        tokenDetails storage auction = tokenToAuction[_nft][_tokenId];\\r\\n        require(auction.duration <= block.timestamp, \\\"Deadline did not pass yet\\\");\\r\\n        require(auction.seller == msg.sender, \\\"Not seller\\\");\\r\\n        require(auction.isActive, \\\"auction not active\\\");\\r\\n        auction.isActive = false;\\r\\n        if (auction.bidAmounts.length == 0) {\\r\\n            ERC721(_nft).safeTransferFrom(\\r\\n                address(this),\\r\\n                auction.seller,\\r\\n                _tokenId\\r\\n            );\\r\\n        } else {\\r\\n            (bool success, ) = auction.seller.call{value: auction.maxBid}(\\\"\\\");\\r\\n            require(success);\\r\\n            for (uint256 i = 0; i < auction.users.length; i++) {\\r\\n                if (auction.users[i] != auction.maxBidUser) {\\r\\n                    (success, ) = auction.users[i].call{\\r\\n                        value: bids[_nft][_tokenId][auction.users[i]]\\r\\n                    }(\\\"\\\");\\r\\n                    require(success);\\r\\n                }\\r\\n            }\\r\\n            ERC721(_nft).safeTransferFrom(\\r\\n                address(this),\\r\\n                auction.maxBidUser,\\r\\n                _tokenId\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n       Called by the seller if they want to cancel the auction for their nft so the bidders get back the locked eeth and the seller get's back the nft\\r\\n    */\\r\\n    function cancelAuction(address _nft, uint256 _tokenId) external {\\r\\n        tokenDetails storage auction = tokenToAuction[_nft][_tokenId];\\r\\n        require(auction.seller == msg.sender, \\\"Not seller\\\");\\r\\n        require(auction.isActive, \\\"auction not active\\\");\\r\\n        auction.isActive = false;\\r\\n        bool success;\\r\\n        for (uint256 i = 0; i < auction.users.length; i++) {\\r\\n        (success, ) = auction.users[i].call{value: bids[_nft][_tokenId][auction.users[i]]}(\\\"\\\");        \\r\\n        require(success);\\r\\n        }\\r\\n        ERC721(_nft).safeTransferFrom(address(this), auction.seller, _tokenId);\\r\\n    }\\r\\n\\r\\n    function getTokenAuctionDetails(address _nft, uint256 _tokenId) public view returns (tokenDetails memory) {\\r\\n        tokenDetails memory auction = tokenToAuction[_nft][_tokenId];\\r\\n        return auction;\\r\\n    }\\r\\n\\r\\n    function onERC721Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    )external override returns(bytes4) {\\r\\n        return bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"));\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\",\"keccak256\":\"0x9ff2493f7746853d7a8f091c8ec92e10c4295fefeb1125b5fb8fefb2d0771ded\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506128a7806100206000396000f3fe60806040526004361061007f5760003560e01c80637792ba5f1161004e5780637792ba5f1461014a5780637bed72321461018d578063859b97fe146101b6578063dd768922146101df57610086565b806310fb197f1461008b578063150b7a02146100b457806359d667a5146100f1578063722565c51461010d57610086565b3661008657005b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190611d97565b61021c565b005b3480156100c057600080fd5b506100db60048036038101906100d69190611c8c565b610753565b6040516100e89190612454565b60405180910390f35b61010b60048036038101906101069190611d0c565b610781565b005b34801561011957600080fd5b50610134600480360381019061012f9190611d0c565b610d00565b60405161014191906125cf565b60405180910390f35b34801561015657600080fd5b50610171600480360381019061016c9190611d0c565b610f86565b60405161018497969594939291906123e5565b60405180910390f35b34801561019957600080fd5b506101b460048036038101906101af9190611d0c565b61103e565b005b3480156101c257600080fd5b506101dd60048036038101906101d89190611d0c565b61166b565b005b3480156101eb57600080fd5b5061020660048036038101906102019190611d48565b611a51565b60405161021391906125f1565b60405180910390f35b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561028c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610283906124ef565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156102fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f39061248f565b60405180910390fd5b6000836fffffffffffffffffffffffffffffffff1611610351576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103489061252f565b60405180910390fd5b60008211610394576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038b906124af565b60405180910390fd5b600081116103d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ce9061250f565b60405180910390fd5b60006040518061012001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff16815260200184815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600115158152602001600067ffffffffffffffff81111561048d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104bb5781602001602082028036833780820191505090505b508152602001600067ffffffffffffffff811115610502577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156105305781602001602082028036833780820191505090505b5081526020016000815250905060003390508673ffffffffffffffffffffffffffffffffffffffff166342842e0e8230896040518463ffffffff1660e01b815260040161057f939291906123ae565b600060405180830381600087803b15801561059957600080fd5b505af11580156105ad573d6000803e3d6000fd5b50505050816000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff02191690831515021790555060c082015181600501908051906020019061071e929190611a83565b5060e082015181600601908051906020019061073b929190611ad0565b50610100820151816007015590505050505050505050565b60007f150b7a023d4804d13e8c85fb27262cb750cf6ba9f9dd3bb30d90f482ceeb4b1f905095945050505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020905080600701548160010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16610816919061269a565b341015610858576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084f9061246f565b60405180910390fd5b8060040160149054906101000a900460ff166108a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a0906125af565b60405180910390fd5b428160020154116108ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e69061258f565b60405180910390fd5b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610a8a5760003373ffffffffffffffffffffffffffffffffffffffff16600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051610a3890612399565b60006040518083038185875af1925050503d8060008114610a75576040519150601f19603f3d011682016040523d82523d6000602084013e610a7a565b606091505b5050905080610a8857600080fd5b505b34600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600081600501805490501415610b7d57348160030181905550338160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610c6b565b600060018260050180549050610b9391906126f0565b905034826005018281548110610bd2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015410610c1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c14906124cf565b60405180910390fd5b348260030181905550338260040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b80600601339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600501349080600181540180825580915050600190039060005260206000200160009091909190915055505050565b610d08611b5a565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160149054906101000a900460ff1615151515815260200160058201805480602002602001604051908101604052809291908181526020018280548015610ed957602002820191906000526020600020905b815481526020019060010190808311610ec5575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015610f6757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610f1d575b5050505050815260200160078201548152505090508091505092915050565b6000602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a90046fffffffffffffffffffffffffffffffff16908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160149054906101000a900460ff16908060070154905087565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020905042816002015411156110d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cf9061254f565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461116a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111619061256f565b60405180910390fd5b8060040160149054906101000a900460ff166111bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b2906125af565b60405180910390fd5b60008160040160146101000a81548160ff021916908315150217905550600081600501805490501415611280578273ffffffffffffffffffffffffffffffffffffffff166342842e0e308360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b8152600401611249939291906123ae565b600060405180830381600087803b15801561126357600080fd5b505af1158015611277573d6000803e3d6000fd5b50505050611666565b60008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682600301546040516112ce90612399565b60006040518083038185875af1925050503d806000811461130b576040519150601f19603f3d011682016040523d82523d6000602084013e611310565b606091505b505090508061131e57600080fd5b60005b82600601805490508110156115d0578260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360060182815481106113a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146115bd57826006018181548110611429577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060008560060184815481106114f8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405161156a90612399565b60006040518083038185875af1925050503d80600081146115a7576040519150601f19603f3d011682016040523d82523d6000602084013e6115ac565b606091505b505080925050816115bc57600080fd5b5b80806115c8906127b4565b915050611321565b508373ffffffffffffffffffffffffffffffffffffffff166342842e0e308460040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff1660e01b8152600401611632939291906123ae565b600060405180830381600087803b15801561164c57600080fd5b505af1158015611660573d6000803e3d6000fd5b50505050505b505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611750576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117479061256f565b60405180910390fd5b8060040160149054906101000a900460ff166117a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611798906125af565b60405180910390fd5b60008160040160146101000a81548160ff021916908315150217905550600080600090505b82600601805490508110156119b757826006018181548110611811577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060008560060184815481106118e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405161195290612399565b60006040518083038185875af1925050503d806000811461198f576040519150601f19603f3d011682016040523d82523d6000602084013e611994565b606091505b505080925050816119a457600080fd5b80806119af906127b4565b9150506117c6565b508373ffffffffffffffffffffffffffffffffffffffff166342842e0e308460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff1660e01b8152600401611a19939291906123ae565b600060405180830381600087803b158015611a3357600080fd5b505af1158015611a47573d6000803e3d6000fd5b5050505050505050565b600160205282600052604060002060205281600052604060002060205280600052604060002060009250925050505481565b828054828255906000526020600020908101928215611abf579160200282015b82811115611abe578251825591602001919060010190611aa3565b5b509050611acc9190611be6565b5090565b828054828255906000526020600020908101928215611b49579160200282015b82811115611b485782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611af0565b5b509050611b569190611be6565b5090565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020016060815260200160608152602001600081525090565b5b80821115611bff576000816000905550600101611be7565b5090565b600081359050611c128161282c565b92915050565b60008083601f840112611c2a57600080fd5b8235905067ffffffffffffffff811115611c4357600080fd5b602083019150836001820283011115611c5b57600080fd5b9250929050565b600081359050611c7181612843565b92915050565b600081359050611c868161285a565b92915050565b600080600080600060808688031215611ca457600080fd5b6000611cb288828901611c03565b9550506020611cc388828901611c03565b9450506040611cd488828901611c77565b935050606086013567ffffffffffffffff811115611cf157600080fd5b611cfd88828901611c18565b92509250509295509295909350565b60008060408385031215611d1f57600080fd5b6000611d2d85828601611c03565b9250506020611d3e85828601611c77565b9150509250929050565b600080600060608486031215611d5d57600080fd5b6000611d6b86828701611c03565b9350506020611d7c86828701611c77565b9250506040611d8d86828701611c03565b9150509250925092565b600080600080600060a08688031215611daf57600080fd5b6000611dbd88828901611c03565b9550506020611dce88828901611c77565b9450506040611ddf88828901611c62565b9350506060611df088828901611c77565b9250506080611e0188828901611c77565b9150509295509295909350565b6000611e1a8383611e3e565b60208301905092915050565b6000611e32838361237b565b60208301905092915050565b611e4781612724565b82525050565b611e5681612724565b82525050565b6000611e678261262c565b611e71818561265c565b9350611e7c8361260c565b8060005b83811015611ead578151611e948882611e0e565b9750611e9f83612642565b925050600181019050611e80565b5085935050505092915050565b6000611ec582612637565b611ecf818561266d565b9350611eda8361261c565b8060005b83811015611f0b578151611ef28882611e26565b9750611efd8361264f565b925050600181019050611ede565b5085935050505092915050565b611f2181612736565b82525050565b611f3081612736565b82525050565b611f3f81612742565b82525050565b6000611f52603283612689565b91507f596f75722062696420646f6573206e6f74206d65657420746865206d696e696d60008301527f756d20707269636520696e6372656d656e7400000000000000000000000000006020830152604082019050919050565b6000611fb8601783612689565b91507f496e76616c6964204e46542061646472657373203078300000000000000000006000830152602082019050919050565b6000611ff8601683612689565b91507f496e76616c6964206475726174696f6e2076616c7565000000000000000000006000830152602082019050919050565b6000612038602783612689565b91507f43757272656e74206d61782062696420697320686967686572207468616e207960008301527f6f757220626964000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061209e601383612689565b91507f496e76616c6964204164647265737320307830000000000000000000000000006000830152602082019050919050565b60006120de602183612689565b91507f507269636520696e6372656d656e74206d75737420626520677265617465722060008301527f30000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612144601b83612689565b91507f50726963652073686f756c64206265206d6f7265207468616e203000000000006000830152602082019050919050565b6000612184601983612689565b91507f446561646c696e6520646964206e6f74207061737320796574000000000000006000830152602082019050919050565b60006121c460008361267e565b9150600082019050919050565b60006121de600a83612689565b91507f4e6f742073656c6c6572000000000000000000000000000000000000000000006000830152602082019050919050565b600061221e601783612689565b91507f446561646c696e6520616c7265616479207061737365640000000000000000006000830152602082019050919050565b600061225e601283612689565b91507f61756374696f6e206e6f742061637469766500000000000000000000000000006000830152602082019050919050565b6000610120830160008301516122aa6000860182611e3e565b5060208301516122bd602086018261235d565b5060408301516122d0604086018261237b565b5060608301516122e3606086018261237b565b5060808301516122f66080860182611e3e565b5060a083015161230960a0860182611f18565b5060c083015184820360c08601526123218282611eba565b91505060e083015184820360e086015261233b8282611e5c565b91505061010083015161235261010086018261237b565b508091505092915050565b6123668161276e565b82525050565b6123758161276e565b82525050565b612384816127aa565b82525050565b612393816127aa565b82525050565b60006123a4826121b7565b9150819050919050565b60006060820190506123c36000830186611e4d565b6123d06020830185611e4d565b6123dd604083018461238a565b949350505050565b600060e0820190506123fa600083018a611e4d565b612407602083018961236c565b612414604083018861238a565b612421606083018761238a565b61242e6080830186611e4d565b61243b60a0830185611f27565b61244860c083018461238a565b98975050505050505050565b60006020820190506124696000830184611f36565b92915050565b6000602082019050818103600083015261248881611f45565b9050919050565b600060208201905081810360008301526124a881611fab565b9050919050565b600060208201905081810360008301526124c881611feb565b9050919050565b600060208201905081810360008301526124e88161202b565b9050919050565b6000602082019050818103600083015261250881612091565b9050919050565b60006020820190508181036000830152612528816120d1565b9050919050565b6000602082019050818103600083015261254881612137565b9050919050565b6000602082019050818103600083015261256881612177565b9050919050565b60006020820190508181036000830152612588816121d1565b9050919050565b600060208201905081810360008301526125a881612211565b9050919050565b600060208201905081810360008301526125c881612251565b9050919050565b600060208201905081810360008301526125e98184612291565b905092915050565b6000602082019050612606600083018461238a565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006126a5826127aa565b91506126b0836127aa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156126e5576126e46127fd565b5b828201905092915050565b60006126fb826127aa565b9150612706836127aa565b925082821015612719576127186127fd565b5b828203905092915050565b600061272f8261278a565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006127bf826127aa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127f2576127f16127fd565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b61283581612724565b811461284057600080fd5b50565b61284c8161276e565b811461285757600080fd5b50565b612863816127aa565b811461286e57600080fd5b5056fea2646970667358221220f600223982323b272a57d6834fb6261b024d837a190eab7a8de49743f5de938b64736f6c63430008000033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80637792ba5f1161004e5780637792ba5f1461014a5780637bed72321461018d578063859b97fe146101b6578063dd768922146101df57610086565b806310fb197f1461008b578063150b7a02146100b457806359d667a5146100f1578063722565c51461010d57610086565b3661008657005b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190611d97565b61021c565b005b3480156100c057600080fd5b506100db60048036038101906100d69190611c8c565b610753565b6040516100e89190612454565b60405180910390f35b61010b60048036038101906101069190611d0c565b610781565b005b34801561011957600080fd5b50610134600480360381019061012f9190611d0c565b610d00565b60405161014191906125cf565b60405180910390f35b34801561015657600080fd5b50610171600480360381019061016c9190611d0c565b610f86565b60405161018497969594939291906123e5565b60405180910390f35b34801561019957600080fd5b506101b460048036038101906101af9190611d0c565b61103e565b005b3480156101c257600080fd5b506101dd60048036038101906101d89190611d0c565b61166b565b005b3480156101eb57600080fd5b5061020660048036038101906102019190611d48565b611a51565b60405161021391906125f1565b60405180910390f35b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561028c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610283906124ef565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156102fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f39061248f565b60405180910390fd5b6000836fffffffffffffffffffffffffffffffff1611610351576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103489061252f565b60405180910390fd5b60008211610394576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038b906124af565b60405180910390fd5b600081116103d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ce9061250f565b60405180910390fd5b60006040518061012001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff16815260200184815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600115158152602001600067ffffffffffffffff81111561048d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104bb5781602001602082028036833780820191505090505b508152602001600067ffffffffffffffff811115610502577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156105305781602001602082028036833780820191505090505b5081526020016000815250905060003390508673ffffffffffffffffffffffffffffffffffffffff166342842e0e8230896040518463ffffffff1660e01b815260040161057f939291906123ae565b600060405180830381600087803b15801561059957600080fd5b505af11580156105ad573d6000803e3d6000fd5b50505050816000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff02191690831515021790555060c082015181600501908051906020019061071e929190611a83565b5060e082015181600601908051906020019061073b929190611ad0565b50610100820151816007015590505050505050505050565b60007f150b7a023d4804d13e8c85fb27262cb750cf6ba9f9dd3bb30d90f482ceeb4b1f905095945050505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020905080600701548160010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16610816919061269a565b341015610858576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084f9061246f565b60405180910390fd5b8060040160149054906101000a900460ff166108a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a0906125af565b60405180910390fd5b428160020154116108ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e69061258f565b60405180910390fd5b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610a8a5760003373ffffffffffffffffffffffffffffffffffffffff16600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051610a3890612399565b60006040518083038185875af1925050503d8060008114610a75576040519150601f19603f3d011682016040523d82523d6000602084013e610a7a565b606091505b5050905080610a8857600080fd5b505b34600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600081600501805490501415610b7d57348160030181905550338160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610c6b565b600060018260050180549050610b9391906126f0565b905034826005018281548110610bd2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015410610c1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c14906124cf565b60405180910390fd5b348260030181905550338260040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b80600601339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600501349080600181540180825580915050600190039060005260206000200160009091909190915055505050565b610d08611b5a565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160149054906101000a900460ff1615151515815260200160058201805480602002602001604051908101604052809291908181526020018280548015610ed957602002820191906000526020600020905b815481526020019060010190808311610ec5575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015610f6757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610f1d575b5050505050815260200160078201548152505090508091505092915050565b6000602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a90046fffffffffffffffffffffffffffffffff16908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160149054906101000a900460ff16908060070154905087565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020905042816002015411156110d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cf9061254f565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461116a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111619061256f565b60405180910390fd5b8060040160149054906101000a900460ff166111bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b2906125af565b60405180910390fd5b60008160040160146101000a81548160ff021916908315150217905550600081600501805490501415611280578273ffffffffffffffffffffffffffffffffffffffff166342842e0e308360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b8152600401611249939291906123ae565b600060405180830381600087803b15801561126357600080fd5b505af1158015611277573d6000803e3d6000fd5b50505050611666565b60008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682600301546040516112ce90612399565b60006040518083038185875af1925050503d806000811461130b576040519150601f19603f3d011682016040523d82523d6000602084013e611310565b606091505b505090508061131e57600080fd5b60005b82600601805490508110156115d0578260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168360060182815481106113a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146115bd57826006018181548110611429577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060008560060184815481106114f8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405161156a90612399565b60006040518083038185875af1925050503d80600081146115a7576040519150601f19603f3d011682016040523d82523d6000602084013e6115ac565b606091505b505080925050816115bc57600080fd5b5b80806115c8906127b4565b915050611321565b508373ffffffffffffffffffffffffffffffffffffffff166342842e0e308460040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff1660e01b8152600401611632939291906123ae565b600060405180830381600087803b15801561164c57600080fd5b505af1158015611660573d6000803e3d6000fd5b50505050505b505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611750576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117479061256f565b60405180910390fd5b8060040160149054906101000a900460ff166117a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611798906125af565b60405180910390fd5b60008160040160146101000a81548160ff021916908315150217905550600080600090505b82600601805490508110156119b757826006018181548110611811577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060008560060184815481106118e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405161195290612399565b60006040518083038185875af1925050503d806000811461198f576040519150601f19603f3d011682016040523d82523d6000602084013e611994565b606091505b505080925050816119a457600080fd5b80806119af906127b4565b9150506117c6565b508373ffffffffffffffffffffffffffffffffffffffff166342842e0e308460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff1660e01b8152600401611a19939291906123ae565b600060405180830381600087803b158015611a3357600080fd5b505af1158015611a47573d6000803e3d6000fd5b5050505050505050565b600160205282600052604060002060205281600052604060002060205280600052604060002060009250925050505481565b828054828255906000526020600020908101928215611abf579160200282015b82811115611abe578251825591602001919060010190611aa3565b5b509050611acc9190611be6565b5090565b828054828255906000526020600020908101928215611b49579160200282015b82811115611b485782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611af0565b5b509050611b569190611be6565b5090565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020016060815260200160608152602001600081525090565b5b80821115611bff576000816000905550600101611be7565b5090565b600081359050611c128161282c565b92915050565b60008083601f840112611c2a57600080fd5b8235905067ffffffffffffffff811115611c4357600080fd5b602083019150836001820283011115611c5b57600080fd5b9250929050565b600081359050611c7181612843565b92915050565b600081359050611c868161285a565b92915050565b600080600080600060808688031215611ca457600080fd5b6000611cb288828901611c03565b9550506020611cc388828901611c03565b9450506040611cd488828901611c77565b935050606086013567ffffffffffffffff811115611cf157600080fd5b611cfd88828901611c18565b92509250509295509295909350565b60008060408385031215611d1f57600080fd5b6000611d2d85828601611c03565b9250506020611d3e85828601611c77565b9150509250929050565b600080600060608486031215611d5d57600080fd5b6000611d6b86828701611c03565b9350506020611d7c86828701611c77565b9250506040611d8d86828701611c03565b9150509250925092565b600080600080600060a08688031215611daf57600080fd5b6000611dbd88828901611c03565b9550506020611dce88828901611c77565b9450506040611ddf88828901611c62565b9350506060611df088828901611c77565b9250506080611e0188828901611c77565b9150509295509295909350565b6000611e1a8383611e3e565b60208301905092915050565b6000611e32838361237b565b60208301905092915050565b611e4781612724565b82525050565b611e5681612724565b82525050565b6000611e678261262c565b611e71818561265c565b9350611e7c8361260c565b8060005b83811015611ead578151611e948882611e0e565b9750611e9f83612642565b925050600181019050611e80565b5085935050505092915050565b6000611ec582612637565b611ecf818561266d565b9350611eda8361261c565b8060005b83811015611f0b578151611ef28882611e26565b9750611efd8361264f565b925050600181019050611ede565b5085935050505092915050565b611f2181612736565b82525050565b611f3081612736565b82525050565b611f3f81612742565b82525050565b6000611f52603283612689565b91507f596f75722062696420646f6573206e6f74206d65657420746865206d696e696d60008301527f756d20707269636520696e6372656d656e7400000000000000000000000000006020830152604082019050919050565b6000611fb8601783612689565b91507f496e76616c6964204e46542061646472657373203078300000000000000000006000830152602082019050919050565b6000611ff8601683612689565b91507f496e76616c6964206475726174696f6e2076616c7565000000000000000000006000830152602082019050919050565b6000612038602783612689565b91507f43757272656e74206d61782062696420697320686967686572207468616e207960008301527f6f757220626964000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061209e601383612689565b91507f496e76616c6964204164647265737320307830000000000000000000000000006000830152602082019050919050565b60006120de602183612689565b91507f507269636520696e6372656d656e74206d75737420626520677265617465722060008301527f30000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612144601b83612689565b91507f50726963652073686f756c64206265206d6f7265207468616e203000000000006000830152602082019050919050565b6000612184601983612689565b91507f446561646c696e6520646964206e6f74207061737320796574000000000000006000830152602082019050919050565b60006121c460008361267e565b9150600082019050919050565b60006121de600a83612689565b91507f4e6f742073656c6c6572000000000000000000000000000000000000000000006000830152602082019050919050565b600061221e601783612689565b91507f446561646c696e6520616c7265616479207061737365640000000000000000006000830152602082019050919050565b600061225e601283612689565b91507f61756374696f6e206e6f742061637469766500000000000000000000000000006000830152602082019050919050565b6000610120830160008301516122aa6000860182611e3e565b5060208301516122bd602086018261235d565b5060408301516122d0604086018261237b565b5060608301516122e3606086018261237b565b5060808301516122f66080860182611e3e565b5060a083015161230960a0860182611f18565b5060c083015184820360c08601526123218282611eba565b91505060e083015184820360e086015261233b8282611e5c565b91505061010083015161235261010086018261237b565b508091505092915050565b6123668161276e565b82525050565b6123758161276e565b82525050565b612384816127aa565b82525050565b612393816127aa565b82525050565b60006123a4826121b7565b9150819050919050565b60006060820190506123c36000830186611e4d565b6123d06020830185611e4d565b6123dd604083018461238a565b949350505050565b600060e0820190506123fa600083018a611e4d565b612407602083018961236c565b612414604083018861238a565b612421606083018761238a565b61242e6080830186611e4d565b61243b60a0830185611f27565b61244860c083018461238a565b98975050505050505050565b60006020820190506124696000830184611f36565b92915050565b6000602082019050818103600083015261248881611f45565b9050919050565b600060208201905081810360008301526124a881611fab565b9050919050565b600060208201905081810360008301526124c881611feb565b9050919050565b600060208201905081810360008301526124e88161202b565b9050919050565b6000602082019050818103600083015261250881612091565b9050919050565b60006020820190508181036000830152612528816120d1565b9050919050565b6000602082019050818103600083015261254881612137565b9050919050565b6000602082019050818103600083015261256881612177565b9050919050565b60006020820190508181036000830152612588816121d1565b9050919050565b600060208201905081810360008301526125a881612211565b9050919050565b600060208201905081810360008301526125c881612251565b9050919050565b600060208201905081810360008301526125e98184612291565b905092915050565b6000602082019050612606600083018461238a565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006126a5826127aa565b91506126b0836127aa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156126e5576126e46127fd565b5b828201905092915050565b60006126fb826127aa565b9150612706836127aa565b925082821015612719576127186127fd565b5b828203905092915050565b600061272f8261278a565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006127bf826127aa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127f2576127f16127fd565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b61283581612724565b811461284057600080fd5b50565b61284c8161276e565b811461285757600080fd5b50565b612863816127aa565b811461286e57600080fd5b5056fea2646970667358221220f600223982323b272a57d6834fb6261b024d837a190eab7a8de49743f5de938b64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bid(address,uint256)": {
        "notice": "Users bid for a particular nft, the max bid is compared and set if the current bid id highest"
      },
      "cancelAuction(address,uint256)": {
        "notice": "Called by the seller if they want to cancel the auction for their nft so the bidders get back the locked eeth and the seller get's back the nft"
      },
      "createTokenAuction(address,uint256,uint128,uint256,uint256)": {
        "notice": "Seller puts the item on auction"
      },
      "executeSale(address,uint256)": {
        "notice": "Called by the seller when the auction duration is over the hightest bid user get's the nft and other bidders get eth back"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1568,
        "contract": "contracts/AuctionV2.sol:AuctionV2",
        "label": "tokenToAuction",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(tokenDetails)1561_storage))"
      },
      {
        "astId": 1576,
        "contract": "contracts/AuctionV2.sol:AuctionV2",
        "label": "bids",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(tokenDetails)1561_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct AuctionV2.tokenDetails))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(tokenDetails)1561_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(tokenDetails)1561_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AuctionV2.tokenDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(tokenDetails)1561_storage"
      },
      "t_struct(tokenDetails)1561_storage": {
        "encoding": "inplace",
        "label": "struct AuctionV2.tokenDetails",
        "members": [
          {
            "astId": 1542,
            "contract": "contracts/AuctionV2.sol:AuctionV2",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1544,
            "contract": "contracts/AuctionV2.sol:AuctionV2",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 1546,
            "contract": "contracts/AuctionV2.sol:AuctionV2",
            "label": "duration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1548,
            "contract": "contracts/AuctionV2.sol:AuctionV2",
            "label": "maxBid",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1550,
            "contract": "contracts/AuctionV2.sol:AuctionV2",
            "label": "maxBidUser",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1552,
            "contract": "contracts/AuctionV2.sol:AuctionV2",
            "label": "isActive",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 1555,
            "contract": "contracts/AuctionV2.sol:AuctionV2",
            "label": "bidAmounts",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1558,
            "contract": "contracts/AuctionV2.sol:AuctionV2",
            "label": "users",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 1560,
            "contract": "contracts/AuctionV2.sol:AuctionV2",
            "label": "minIncrement",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}